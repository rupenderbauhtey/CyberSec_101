CORS ( Cross Origin Resource Sharing ) Vulnerability

What is  CORS  ?

CORS stands for Cross Origin Resource Sharing . Initially There was A restriction that only that domain will make requests for a resource to which the resource actually belongs. This Restriction was done at client side but later on the need for using each other's resource increased and to securely request and access the resources from other domains this mechanism came into use called Cross Origin Resource Sharing . With the help of some more headers , one web application can request resources belonging to any other domain .
Most of the Web applications contain  a list of white listed domains which can request it for some resource file .
If The request is found valid then that web application gives access to that resource .

When Does a vulnerability take Place ?
When a web application Doesn't have a list of white listed domains and gives access of a resource to any other web application requesting it . In this scenario any domain can request that particular vulnerable web application and can get access to any file .


How can We Hunt for this vulnerability

Method 1 -

Hunting for this vulnerability is simple .

1. Spider the Web application you want to test this vulnerability on .

Now ,
In HTTP responses , search for this

Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true

( Find this in any HTTP response doesn't confirm that the web application has CORS , but yes if  it is there you can test further other things to confirm )

OR

Access-Control-Allow-Origin: null
Access-Control-Allow-Credentials: true

( If these are present in any HTTP Response , Then the web application is vulnerable to CORS .)

Method 2 -

1. Add This Header in the HTTP Request .

origin : https://example.com

And if you find this in the response to that request

Access-Control-Allow-Origin: https://example.com
Access-Control-Allow-Credentials: true

(Then the Web application is Vulnerable to CORS )

Remediation-
1.Don't allow any domain to request and get access to the resource
2.Create a white list of the domains which can get access to the resource
3.While creating white list do not allow the subdomains of a domain to request and get acess to the resource because the chances of being vulnerable of a sub domain are always high , if you are including subdomains also , try to include as less as you can

THANK YOU





